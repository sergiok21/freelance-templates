import os
import shutil

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BotBlocked

from config import bot, dp

from utils import process_files, define_user, get_results


class AdminStates(StatesGroup):
    START = State()
    DEFINE_FUNC = State()
    WHO_LOADED_DATA = State()
    LOAD_DATA = State()
    LOAD_FILE = State()
    ECHO_ALL = State()


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    # if message.chat.id == 687867349:
    await AdminStates.START.set()
    await handle_start_admin(message, state)


@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message, state: FSMContext):
    commands = '<b>–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞</b>:\n' \
               '<b>/start</b> - –ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É.\n' \
               '<b>/help</b> - –ù–∞–¥—Å–∏–ª–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.\n\n'

    load_data = '<b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é –¥–∞–Ω–∏—Ö</b>:\n–ù–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "<b>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ</b>". ' \
                '–î–∞–ª—ñ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å –≤–∏–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–∏—Ö (<b>Cookies</b>). –ó —á–∞—Å–æ–º –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ 2 –∞—Ä—Ö—ñ–≤–∏ - ' \
                '"<b>data.zip</b>" —Ç–∞ "<b>for_search.zip</b>". –ü–µ—Ä—à–∏–π –∞—Ä—Ö—ñ–≤ –≤–º—ñ—â–∞—î –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ, —ñ–Ω—à–∏–π –ø–æ—à—É–∫–æ–≤—ñ.' \
                '–ü—ñ—Å–ª—è –≤–∏–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–∏—Ö, —É—Å—ñ –¥–∞–Ω—ñ –Ω–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó <b>–≤–∏–¥–∞–ª—è—é—Ç—å—Å—è</b>.\n\n'

    change_data = '<b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º</b>:\n–ù–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' \
                  '"<b>–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º</b>". –î–∞–ª—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ "for_search.zip", ' \
                  '–π–æ–≥–æ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —ñ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –≤—ñ–¥–±—É–≤–∞–≤—Å—è –ø—Ä–æ—Ü–µ—Å –≤–∏–∫–∞—á–∫–∏ –¥–∞–Ω–∏—Ö. ' \
                  '–î–∞–ª—ñ –≤–≤–æ–¥–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç, –ø–æ —è–∫–æ–º—É –≤—ñ–¥–±—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –ø–æ—à—É–∫ —Ä–æ–±—ñ—Ç–Ω–∏–∫–∞. ' \
                  '–ü–æ—à—É–∫ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞–≤–¥—è–∫–∏ –Ω–∞–∑–≤—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Cookies. –Ø–∫—â–æ —Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –±—É–¥–µ –∑–Ω–∞–π–¥–µ–Ω–æ, ' \
                  '—Ç–æ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ "<b>—ñ–º\'—è (—Ç–µ–≥)</b>". –Ü–Ω–∞–∫—à–µ –ø–æ–º—ñ—Ç–∏—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –±–µ–∑—É—Å–ø—ñ—à–Ω–∏–π –ø–æ—à—É–∫.\n\n'

    echo = '<b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—Ä–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å—ñ—Ö</b>:\n–ù–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' \
           '"<b>–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—Å—ñ—Ö</b>". –î–∞–ª—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–≤–µ—Å—Ç–∏ —è–∫–µ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ' \
           '–í–æ–Ω–æ –±—É–¥–µ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ —É—Å—ñ–º —Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º, —è–∫—ñ –ø—ñ–¥\'—î–¥–Ω–∞–Ω—ñ –¥–æ –±–æ—Ç–∞, –∞ —Ç–∞–∫–æ–∂ –Ω–µ –±–ª–æ–∫—É–≤–∞–ª–∏ –π–æ–≥–æ.'

    await bot.send_message(message.chat.id, commands + load_data + change_data + echo, parse_mode='html')


@dp.message_handler(state=AdminStates.START)
async def handle_start_admin(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await bot.set_my_commands([
            types.BotCommand('/start', '–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º.'),
            types.BotCommand('/help', '–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.')
        ])
        bot_info = await bot.get_me()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row_width = 1
        download_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
        search_user = types.KeyboardButton("–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º")
        who_loaded_data = types.KeyboardButton("–•—Ç–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ?")
        echo = types.KeyboardButton("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—Å—ñ—Ö")

        markup.add(download_data, search_user, who_loaded_data, echo)

        await bot.send_message(message.chat.id,
                               '–í—ñ—Ç–∞—é, <b>{0}</b>.\n–Ø - <b>{1}</b> ü§ñ, –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö.\n\n'
                               '–î–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ —è–∫—É—Å—å —Ñ—É–Ω–∫—Ü—ñ—é - '
                               '"<b>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ</b>", "<b>–ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º</b>" '
                               '–∞–±–æ "<b>–•—Ç–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ?</b>".'.format(
                                   message.chat.first_name, bot_info.first_name
                               ),
                               reply_markup=markup, parse_mode='html')

        await AdminStates.DEFINE_FUNC.set()


@dp.message_handler(state=AdminStates.DEFINE_FUNC)
async def define_func(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if message.text == '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ':
            await state.finish()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            download_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
            search_user = types.KeyboardButton("–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º")
            who_loaded_data = types.KeyboardButton("–•—Ç–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ?")
            echo = types.KeyboardButton("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—Å—ñ—Ö")

            markup.add(download_data, search_user, who_loaded_data, echo)

            if await process_files():
                await bot.send_message(message.chat.id,
                                       '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ üò¥.',
                                       reply_markup=markup, parse_mode='html')

                results = open('results.zip', 'rb')
                for_search = open('for_search.zip', 'rb')

                await bot.send_document(message.chat.id, document=results)
                await bot.send_document(message.chat.id, document=for_search)

                if os.path.exists('data'):
                    shutil.rmtree('data')
                    os.mkdir('data')

                if os.path.exists('results'):
                    shutil.rmtree('results')
                    os.remove('results.zip')

                if os.path.exists('for_search.zip'):
                    os.remove('for_search.zip')

                await bot.send_message(message.chat.id,
                                       '–©–æ —Ç–µ–ø–µ—Ä —Ä–æ–±–∏–º–æ ü§î?',
                                       reply_markup=markup, parse_mode='html')
            else:
                await bot.send_message(message.chat.id,
                                       '–î–∞–Ω—ñ –≤–∂–µ –±—É–ª–∏ –≤–∏–≥—Ä—É–∂–µ–Ω—ñ –∞–±–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ —ó—Ö.',
                                       reply_markup=markup, parse_mode='html')

            await AdminStates.DEFINE_FUNC.set()

        elif message.text == '–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            back = types.KeyboardButton("–ù–∞–∑–∞–¥")

            markup.add(back)

            await bot.send_message(message.chat.id,
                                   '–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª "<b>for_search.zip</b>". –ô–æ–≥–æ –º–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏.',
                                   parse_mode='html', reply_markup=markup)

            await AdminStates.LOAD_FILE.set()

        elif message.text == '–•—Ç–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ?':
            results = await get_results()

            if results:
                information = ''
                total_members = 0
                total_num = 0
                for key, value in results.items():
                    information += f'<b>{key}</b>: {value}\n'

                    total_members += 1
                    total_num += value
                information += f'\n<b>–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π</b>: {total_members}.\n' \
                               f'<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤</b>: {total_num}.'
            else:
                information = '–ù—ñ—Ö—Ç–æ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ.'

            await bot.send_message(message.chat.id, information, parse_mode='html')

        elif message.text == '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—Å—ñ—Ö':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            back = types.KeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")

            markup.add(back)

            await bot.send_message(message.chat.id,
                                   '–ú–æ–∂–µ—Ç–µ –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–æ–Ω–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞ '
                                   '(—è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –ø—Ä–∏–∑—É–ø–∏–Ω–∏–ª–∏ –≤ —Å–µ–±–µ –±–æ—Ç–∞).',
                                   parse_mode='html', reply_markup=markup)

            await AdminStates.ECHO_ALL.set()

        else:
            await bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.', parse_mode='html')


@dp.message_handler(content_types=['document', 'text'], state=AdminStates.LOAD_FILE)
async def load_file(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if message.text == '–ù–∞–∑–∞–¥':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            download_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
            search_user = types.KeyboardButton("–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º")
            who_loaded_data = types.KeyboardButton("–•—Ç–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ?")
            echo = types.KeyboardButton("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—Å—ñ—Ö")

            markup.add(download_data, search_user, who_loaded_data, echo)

            await bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é.', reply_markup=markup)

            await AdminStates.DEFINE_FUNC.set()
        elif message.document:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            home = types.KeyboardButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É")

            markup.add(home)

            await bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É - –Ω–∞–∑–≤–∞ Cookies.\n', parse_mode='html', reply_markup=markup)

            file_info = await bot.get_file(message.document.file_id)
            await bot.download_file(file_info.file_path, message.document.file_name)

            await AdminStates.LOAD_DATA.set()
        else:
            await bot.send_message(message.chat.id, '–¶–µ —Ñ–∞–π–ª?')


@dp.message_handler(state=AdminStates.LOAD_DATA)
async def load_data(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if message.text == '–ù–∞ –≥–æ–ª–æ–≤–Ω—É':
            await state.finish()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            download_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
            search_user = types.KeyboardButton("–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º")
            who_loaded_data = types.KeyboardButton("–•—Ç–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ?")
            echo = types.KeyboardButton("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—Å—ñ—Ö")

            markup.add(download_data, search_user, who_loaded_data, echo)

            await bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é.', reply_markup=markup, parse_mode='html')

            await AdminStates.DEFINE_FUNC.set()
        else:
            await state.finish()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            download_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
            search_user = types.KeyboardButton("–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º")
            who_loaded_data = types.KeyboardButton("–•—Ç–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ?")
            echo = types.KeyboardButton("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—Å—ñ—Ö")

            markup.add(download_data, search_user, who_loaded_data, echo)

            user = await define_user(message.text)

            await bot.send_message(message.chat.id,
                                   f'<b>{user}</b>' if user else '–†–æ–±—ñ—Ç–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.',
                                   parse_mode='html')

            await bot.send_message(message.chat.id, '–©–æ –¥–∞–ª—ñ ü§î?', reply_markup=markup, parse_mode='html')

            await AdminStates.DEFINE_FUNC.set()


@dp.message_handler(state=AdminStates.ECHO_ALL)
async def echo_all(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.finish()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row_width = 1
        download_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
        search_user = types.KeyboardButton("–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –¥–∞–Ω–∏–º")
        who_loaded_data = types.KeyboardButton("–•—Ç–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ –¥–∞–Ω—ñ?")
        echo = types.KeyboardButton("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—Å—ñ—Ö")

        markup.add(download_data, search_user, who_loaded_data, echo)

        if message.text == '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏':
            await bot.send_message(message.chat.id, '–í—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ.',
                                   parse_mode='html', reply_markup=markup)
        else:
            file = open('users_id.txt', 'r')
            users = file.read()
            if users:
                users = users[:-1].split('\n')
                for user_id in users:
                    if user_id != str(message.chat.id):
                        try:
                            await bot.send_message(user_id, '<b>–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n\n' + message.text,
                                                   parse_mode='html')
                        except BotBlocked:
                            pass
                await bot.send_message(message.chat.id, '–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —É—Å—ñ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.',
                                       parse_mode='html', reply_markup=markup)
            else:
                await bot.send_message(message.chat.id, '–ñ–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.',
                                       parse_mode='html', reply_markup=markup)

        await AdminStates.DEFINE_FUNC.set()
