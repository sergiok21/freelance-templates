import os
import shutil

from aiogram import executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import bot, dp
from admin import AdminStates, handle_start_admin
from utils import add_user_id


class UserStates(StatesGroup):
    START = State()
    HELP = State()
    LOAD_DATA = State()
    PROCESS_DATA = State()
    PROCESS_COOKIES = State()
    EDIT_DATA = State()


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    await add_user_id(str(message.chat.id))
    if message.chat.id == ...:
        await AdminStates.START.set()
        await handle_start_admin(message, state)
    else:
        await UserStates.START.set()
        await handle_start(message, state)


@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message, state: FSMContext):
    commands = '<b>–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞</b>:\n' \
               '<b>/start</b> - –ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É.\n' \
               '<b>/help</b> - –ù–∞–¥—Å–∏–ª–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.\n\n'
    load_data = '<b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é –¥–∞–Ω–∏—Ö</b>:\n–ù–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "<b>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ</b>". ' \
                '–î–∞–ª—ñ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ <b>Cookies</b>. –í–æ–Ω–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ —è–∫ –ø–æ –æ–¥–Ω–æ–º—É, —Ç–∞–∫ —ñ –ø–∞—á–∫–æ—é. ' \
                '–ö–æ–ª–∏ –ø—Ä–æ—Ü–µ—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –±—É–¥–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÖ".\n\n'
    change_data = '<b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—é –¥–∞–Ω–∏—Ö</b>:\n–ù–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "<b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ</b>". ' \
                  '–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ "<b>*.zip</b>" - –≤—ñ–Ω –≤–º—ñ—â–∞—î —É—Å—ñ –í–∞—à—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ. ' \
                  '–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞–Ω—ñ, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º - –ø–æ –æ–¥–Ω–æ–º—É –∞–±–æ –ø–∞—á–∫–æ—é. ' \
                  '–ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö, –Ω–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÖ".\n\n' \
                  '‚ùóÔ∏è<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>. –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –í–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –í–∞–º —É –±—É–¥—å-—è–∫–æ–º—É ' \
                  '–≤–∏–ø–∞–¥–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–Ω–æ–≤–ª–µ–Ω—ñ, —Ç–æ–º—É —â–æ –≤–æ–Ω–∏ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é.'

    await bot.send_message(message.chat.id, commands + load_data + change_data, parse_mode='html')


@dp.message_handler(state=UserStates.START)
async def handle_start(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await bot.set_my_commands([
            types.BotCommand('/start', '–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º.'),
            types.BotCommand('/help', '–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.')
        ])
        bot_info = await bot.get_me()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row_width = 1
        send_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
        edit_data = types.KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ")

        markup.add(send_data, edit_data)

        await bot.send_message(message.chat.id,
                               '–í—ñ—Ç–∞—é, <b>{0}</b>.\n–Ø - <b>{1}</b> ü§ñ, –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö.\n\n'
                               '–ë–∞–∂–∞—î—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ üìù?'
                               .format(message.chat.first_name, bot_info.first_name),
                               reply_markup=markup, parse_mode='html')

        await UserStates.PROCESS_DATA.set()


@dp.message_handler(state=UserStates.PROCESS_DATA)
async def process_data(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if message.text == '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            done = types.KeyboardButton("‚úÖ")
            back = types.KeyboardButton("–ù–∞–∑–∞–¥")

            markup.add(done, back)

            await bot.send_message(message.chat.id,
                                   '–ü—Ä–∏–π–º–∞—é—Ç—å—Å—è –ª–∏—à–µ Cookies. –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–∞—á–∫–æ—é –∞–±–æ –ø–æ –æ–¥–Ω–æ–º—É.\n'
                                   '–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–µ —É—Å—ñ —Ñ–∞–π–ª–∏, –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ".',
                                   parse_mode='html', reply_markup=markup)

            await UserStates.PROCESS_COOKIES.set()
        elif message.text == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ':
            first_name = message.chat.first_name
            username = message.chat.username
            path = f'data/{first_name} ({username})'
            if os.path.exists(path):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.row_width = 1
                done = types.KeyboardButton("‚úÖ")
                back = types.KeyboardButton("–ù–∞–∑–∞–¥")

                markup.add(done, back)

                shutil.make_archive(f'{first_name} ({username})', 'zip', path)

                file = open(f'{first_name} ({username}).zip', 'rb')
                await bot.send_document(message.chat.id, document=file)
                os.remove(f'{first_name} ({username}).zip')
                shutil.rmtree(path)

                await bot.send_message(message.chat.id,
                                       f'–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç–µ "<b>{first_name} ({username}).zip</b>" —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î—Ç–µ –¥–∞–Ω—ñ. –î–∞–ª—ñ '
                                       f'–Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ —É—Å—ñ –¥–∞–Ω—ñ, –≤–∫–ª—é—á–Ω–æ —ñ–∑ –ø–æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏. –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö '
                                       f'–Ω–∞—Ç–∏—Å–∫–∞—î—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÖ".',
                                       parse_mode='html', reply_markup=markup)

                await UserStates.EDIT_DATA.set()
            else:
                await bot.send_message(message.chat.id,
                                       '–í–∏ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∞–±–æ –¥–∞–Ω—ñ –±—É–ª–∏ –≤–∏–≥—Ä—É–∂–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
                                       parse_mode='html')

        else:
            await bot.send_message(message.chat.id,
                                   '–ü–µ—Ä–µ–¥–∏–≤—ñ—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é (<b>/help</b>).',
                                   parse_mode='html')


@dp.message_handler(content_types=['document', 'text'], state=UserStates.PROCESS_COOKIES)
async def process_cookies(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if message.text == '‚úÖ':
            await state.finish()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            send_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
            edit_data = types.KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ")

            markup.add(send_data, edit_data)

            await bot.send_message(message.chat.id,
                                   '–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ.',
                                   reply_markup=markup,
                                   parse_mode='html')
            await bot.send_message(message.chat.id, '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ –¥–∞–Ω—ñ ü§î?', reply_markup=markup,
                                   parse_mode='html')

            await UserStates.PROCESS_DATA.set()

        elif message.text == '–ù–∞–∑–∞–¥':
            await state.finish()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            send_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
            edit_data = types.KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ")

            markup.add(send_data, edit_data)

            await bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é.', reply_markup=markup,
                                   parse_mode='html')

            await UserStates.PROCESS_DATA.set()

        elif message.document:
            first_name = message.chat.first_name
            username = message.chat.username
            file_name = f'data/{first_name} ({username})/{message.document.file_name}'

            file_info = await bot.get_file(message.document.file_id)
            await bot.download_file(file_info.file_path, file_name)

        else:
            await bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.',
                                   parse_mode='html')


@dp.message_handler(content_types=['document', 'text'], state=UserStates.EDIT_DATA)
async def edit_data(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if message.text == '–ù–∞–∑–∞–¥':
            await state.finish()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            send_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
            edit_data = types.KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ")

            markup.add(send_data, edit_data)

            await bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é.', reply_markup=markup,
                                   parse_mode='html')

            await UserStates.PROCESS_DATA.set()

        elif message.text == '‚úÖ':
            await state.finish()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row_width = 1
            send_data = types.KeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
            edit_data = types.KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ")

            markup.add(send_data, edit_data)

            await bot.send_message(message.chat.id,
                                   '–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ.',
                                   reply_markup=markup,
                                   parse_mode='html')
            await bot.send_message(message.chat.id, '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ –¥–∞–Ω—ñ ü§î?', reply_markup=markup,
                                   parse_mode='html')

            await UserStates.PROCESS_DATA.set()

        elif message.document:
            first_name = message.chat.first_name
            username = message.chat.username
            file_name = f'data/{first_name} ({username})/{message.document.file_name}'

            file_info = await bot.get_file(message.document.file_id)
            await bot.download_file(file_info.file_path, file_name)

        else:
            await bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.',
                                   parse_mode='html')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
